[{"categories":["文章"],"content":"本文进一步介绍了git在本地进行项目版本管理的使用逻辑。 git并不是一个简单的代码上传和下载的工具，其核心功能在于其对代码版本的管理和快速恢复的功能，这对于新功能的开发非常友好，写了这么久代码第一次见到这个软件属实是惊艳到我了。我也不理解为什么学校的老师不给我们介绍这个工具。 git的可以理解为核心工作区的\"文件群\"管理,简单来说，任何被add的文件都会算进\"文件群\"里面，统一管理。要注意的一个问题就是，对于部分不需要版本追踪的文件，注意在任何分支和修改都不要加入工作区，否则会导致切换到旧的分支的时候该文件消失。 ","date":"2024-08-30","objectID":"/posts/my-firth-post/:0:0","tags":["笔记"],"title":"git学习笔记","uri":"/posts/my-firth-post/"},{"categories":["文章"],"content":"1、单一分支 首先，在项目文件夹进行初始化，然后添加文件到工作区， git init 然后就是往工作区添加文件。 git add new.txt git commit -m \"初始化\" 如果下次需要更新追踪的文件的话，使用如下代码。（当且仅当追踪的文件没有增加，只有修改或者删除） git commit -am \"更新\" 如果修改了想要回退到上一次保存的版本，使用下面代码（后面的\".“可以替换为特定文件名） git restore . 也可以从某个特定提交恢复(abc134指提交的版本，可用git log 查看) git checkout abc1234 -- path/to/deleted-file ","date":"2024-08-30","objectID":"/posts/my-firth-post/:1:0","tags":["笔记"],"title":"git学习笔记","uri":"/posts/my-firth-post/"},{"categories":["文章"],"content":"2、多分支管理 多分支的逻辑与单一分支基本一样，但多路线带来的问题在于分支的合并和切换。 首先是新分支的建立与切换 git branch new git switch new 如果要查看当前分支所追踪的文件，可以使用git ls-tree -r HEAD --name-only,其中HEAD表示当前分支的最新提交。如果要查看当前所有分支，可以用git branch 然后是分支合并的逻辑，这个逻辑在两路分支合并时会变得及其复杂，但如果是从master分支一路开出来的新分支然后再master分支使用merge命令git merge new的话，基本就可以认为是把master分支覆写为新的分支。但如果是从master的历史节点分出来，然后修改的话，这个合并的过程就会变得极其复杂，对于一般个人的项目来说，也很少会有如此奇葩的管理需求，所以看心情，之后感兴趣的话就看看git的冲突合并逻辑到底怎么玩。开个第3小节 ","date":"2024-08-30","objectID":"/posts/my-firth-post/:2:0","tags":["笔记"],"title":"git学习笔记","uri":"/posts/my-firth-post/"},{"categories":["文章"],"content":"本文介绍了个人制作edge浏览器扩展\"my new tab\"的过程，主要讲述edge浏览器扩展开发的基本逻辑。 ","date":"2024-08-29","objectID":"/posts/my-forth-post/:0:0","tags":["笔记"],"title":"edge扩展开发记录","uri":"/posts/my-forth-post/"},{"categories":["文章"],"content":"1、为什么要自己做一个？ 我的需求其实可以在市面上的一些自定义新标签页的扩展满足了，我使用这些扩展基于四个需求， ","date":"2024-08-29","objectID":"/posts/my-forth-post/:1:0","tags":["笔记"],"title":"edge扩展开发记录","uri":"/posts/my-forth-post/"},{"categories":["文章"],"content":"1.1、 方便切换搜索引擎的搜索工具， 这点几乎是原生新标签页所做不到的,目前的浏览器大都只支持一种搜索引擎，切换也需要跑到设置页面进行一同修改，实为不便。 ","date":"2024-08-29","objectID":"/posts/my-forth-post/:1:1","tags":["笔记"],"title":"edge扩展开发记录","uri":"/posts/my-forth-post/"},{"categories":["文章"],"content":"1.2、 提供每日热搜的标题及对应的跳转链接。 那么，第二点并不是想象中那样好满足，目前某新标签页内提供的b站热门其实是每日热门，而不是综合热门，每日热门是可以轻松通过买量上去的，例证就是米哈游的pv、op、ep等视频在刚发布当天就可以上每日热门，但是之后很难上到综合热门。这种信息茧房让我感到不适。 ","date":"2024-08-29","objectID":"/posts/my-forth-post/:1:2","tags":["笔记"],"title":"edge扩展开发记录","uri":"/posts/my-forth-post/"},{"categories":["文章"],"content":"1.3、 保护隐私 这很好理解，用户端根本无法确知自己的搜索记录是否会被记录，当然，经过本人本次项目的开发及审核经验，本人认为新标签页有较低概率收集用户隐私。当然，如果是图标隐私的话，就不好说了，因为图标信息、壁纸是存在服务器的，所以可以实现用户信息同步。泄露图标信息倒是没啥，但是每次打开浏览器都要加载并且尝试从网站获取图标和壁纸确实对网速和后台造成了负荷，这是本人所无法接受的。 ","date":"2024-08-29","objectID":"/posts/my-forth-post/:1:3","tags":["笔记"],"title":"edge扩展开发记录","uri":"/posts/my-forth-post/"},{"categories":["文章"],"content":"1.4、 定制化 个人认为别人做的标签页为了迎合大众多少都会加入许多我用不到的模块，这些模块同样让人生厌。而且整体的美观度也无法根据我自己的想法随便改。 综上我的需求可以归结为搜索、热门、导航。 ","date":"2024-08-29","objectID":"/posts/my-forth-post/:1:4","tags":["笔记"],"title":"edge扩展开发记录","uri":"/posts/my-forth-post/"},{"categories":["文章"],"content":"2、edge浏览器扩展的源码组织 edge跟chrome同源，所以扩展函数什么的也是通用的，这里展示一下一个扩展的基本结构： - icons/ - icon64.png - newpage/ - style.css - index.html - script.js - background.js - manifest.json 如上所展示的，扩展的主要文件由四个文件构成，manifest.json、background.js、index.html、script.js,其中background.js并不是必要的。 ","date":"2024-08-29","objectID":"/posts/my-forth-post/:2:0","tags":["笔记"],"title":"edge扩展开发记录","uri":"/posts/my-forth-post/"},{"categories":["文章"],"content":"2.1、manifest文件 manifest文件主要用于声明扩展的作者版本号等信息，除开一些无关紧要的信息，manifest还声明了重要的安全隐私相关的权限信息，比如跨域访问、允许访问的域名、闹钟事件等，本次开发使用到的热搜显示模块就使用到了以上三个功能，这里说明一下。至于index.html，是扩展的图形化操作界面，有一些扩展再点击后会弹出一个小窗口，这个小窗口也是使用html编写的，一般叫popup.html。本项目只需要本地编写一个页面然后重定向为主页即可。此外，浏览器的CORS禁止当前网页的脚本跨域访问，但是如果实现在manifest文件里面声明需要访问的网站就可以轻松跨域，这算是扩展的优势，因为普通的脚本即使临时禁用CORS也能fetch，但是无法读取获得的内容。顺带一提，比起python爬虫获取json文件，js脚本的运行速度要快上不少，个人认为可能是浏览器的环境在浏览器启动后就做好了，但是python脚本却需要先启用雨滴桌面，然后桌面唤起vbs脚本，然后vbs脚本建立终端窗口，在终端窗口在建立python环境，这个流程之长确实会影响爬虫的效率，更何况python这种语言也不是什么高效率的语言，在python脚本里面还要import对应的库，确实不如直接js脚本的fetch方法来的快。 此外，为了避免fetch时把自己的cookie等信息一块发出去，在fetch使用以下命令 fetch('https://example.com/data', { method: 'GET', credentials: 'omit' // 不发送 cookies 和 HTTP 认证信息 }) ","date":"2024-08-29","objectID":"/posts/my-forth-post/:2:1","tags":["笔记"],"title":"edge扩展开发记录","uri":"/posts/my-forth-post/"},{"categories":["文章"],"content":"2.2、html文件及对应的js脚本 关于前端的基础知识这里没办法完整且详尽地记录，这里只写几个遇到的问题，问题基本都是因为js脚本是运行在浏览器扩展的环境下面，所以寻常网页脚本可以做的事在这里并不能完全自如的做出来，比如爬虫遇到gbk编码返回的信息，js脚本就无法安装库来解析，或者说搞起来很麻烦。（至少目前我还没整明白，我看别人都是扔到后端去做，但是一个完全本地运行的扩展如果为了解析gbk字符串就要用后端的话属实违背我的本意了） 还有就是在爬虫的使用上，我是想使用background脚本先获取内容，解析为json之后存在浏览器的存储里面（最大大小支持5M，在本项目的使用场景里面足够了），遇到的问题是，js脚本无法再浏览器环境下使用dompraser const url = 'https://www.52pojie.cn/forum.php?mod=guide\u0026view=hot'; async function fetchData() { try { const response = await fetch(url); const text = await response.text(); // 解析HTML const parser = new DOMParser(); const doc = parser.parseFromString(text, 'text/html'); // 提取数据 const items = Array.from(doc.querySelectorAll('.commonbox .subject')).map(element =\u003e { const title = element.querySelector('a')?.textContent.trim(); const summary = element.querySelector('.excerpt')?.textContent.trim() || 'No summary available'; return { title, summary }; }); // 保存到本地存储 chrome.storage.local.set({ data: items }); } catch (error) { console.error('Error fetching data:', error); } } // 每天更新一次数据 const updateInterval = 24 * 60 * 60 * 1000; // 24小时 fetchData(); setInterval(fetchData, updateInterval); 所以不得不采用字符串匹配的方法： const url = 'https://www.52pojie.cn/forum.php?mod=guide\u0026view=hot'; async function fetchData() { try { const response = await fetch(url); const text = await response.text(); // 使用正则表达式解析数据 const items = []; const regex = /\u003ca href=\".*?\" class=\"s xst\"\u003e(.*?)\u003c\\/a\u003e.*?\u003cdiv class=\"excerpt\"\u003e(.*?)\u003c\\/div\u003e/gs; let match; while ((match = regex.exec(text)) !== null) { const title = match[1].trim(); const summary = match[2].trim(); items.push({ title, summary }); } // 保存到本地存储 chrome.storage.local.set({ data: items }); } catch (error) { console.error('Error fetching data:', error); } } // 每天更新一次数据 const updateInterval = 24 * 60 * 60 * 1000; // 24小时 fetchData(); setInterval(fetchData, updateInterval); ","date":"2024-08-29","objectID":"/posts/my-forth-post/:2:2","tags":["笔记"],"title":"edge扩展开发记录","uri":"/posts/my-forth-post/"},{"categories":["文章"],"content":"2.3、扩展的更新逻辑 扩展所有的图标、壁纸全都存在本地，毫无疑问可以加快反应速度，在断网的状态也能保持优雅，但是对应断网状态下，热搜的刷新逻辑就成了问题，具体来说，有两个问题， 1、定时刷新的话，错过闹钟时间的话是不是就不刷新了？ 2、在断网状态下扩展在后台疯狂请求刷新怎么办？ 问题1的解法是使用chrome的alarm，只要在manifest声明该权限后就可以设置闹钟，平时background脚本沉睡，等到时间就会起来干活，如果错过闹钟，那么下次启动的时候就会自动执行 问题2的解法是加入刷新按键，html通过按键触发网页的js脚本，网页js脚本会在后台与background脚本通信进而触发刷新 目前的问题在于如果刚打开浏览器的时候没网，过一会网络连上了，那么就要手动刷新了，这是比较麻烦的，但是相应的，这个脚本基本每天只会执行一次，具有极高的效率，相比网上其他人做的脚本可以说更适合本人使用了。 最后，展示一下成品 ","date":"2024-08-29","objectID":"/posts/my-forth-post/:2:3","tags":["笔记"],"title":"edge扩展开发记录","uri":"/posts/my-forth-post/"},{"categories":["文章"],"content":"3、之后的发展方向 1、界面美化 目前的界面还是太丑了，最丑的就是搜索栏、左一块右一块，跟edge浏览器的新界面一样丑，两个泡泡连着，就像烫破的伤口 2、加入更多的订阅源 52破解的gbk编码太奇葩了，对于不支持gbk处理的扩展js脚本简直天克，之后看看有没有别的中转源进行爬虫。实在不行看有没有别的替代源也行。不过我不觉得我有太多精力在满足需求后还继续完善下去也就是了。 ","date":"2024-08-29","objectID":"/posts/my-forth-post/:3:0","tags":["笔记"],"title":"edge扩展开发记录","uri":"/posts/my-forth-post/"},{"categories":["文章"],"content":" 本文介绍了个人博客的搭建过程，从安装hugo、git、go到主题下载、文章发布、github设置个人页的过程。 这里说一下如何如何借助git与hugo制作自己的博客 ","date":"2024-08-24","objectID":"/posts/my-third-post/:0:0","tags":["笔记"],"title":"Git与Hugo学习笔记","uri":"/posts/my-third-post/"},{"categories":["文章"],"content":"1、三件套下载 下载hugo ,然后放到某个目录，把目录假如系统环境变量，在cmd输入hugo version，如果没有报错就说明没有错。 下载git ,安装，一路默认即可，使用git version检验安装是否成功。 下载go ,虽然hugo的运行用到了go，但是hugo的使用不需要理解go语言的语法。顺带一提之后我应该会看看go语言，也许会写点什么东西。同样使用go version检验安装是否成功。 ","date":"2024-08-24","objectID":"/posts/my-third-post/:1:0","tags":["笔记"],"title":"Git与Hugo学习笔记","uri":"/posts/my-third-post/"},{"categories":["文章"],"content":"2、文件夹组织 新建项目文件夹，然后在文件夹里面输入命令,可以用tree /F查看当前目录所有文件，hugo的new似乎不需要再content文件夹下运行。 hugo new site hugo-demo cd hugo-demo hugo new posts/my-first-post.md 然后就是从github克隆主题,在themes文件夹里面，使用命令，不需要初始化，git会自己建文件夹 git clone https://gitee.com/archiguru/LoveIt.git 在my-first-post.md里面写入 # halo Hugo it's my first hugo post... 然后打开config.toml,写入 baseURL = \"http://example.org/\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" # 网站标题 title = \"Dengyunzhe's Site\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 语言名称 [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true # 作者配置 [author] name = \"Dengyunzhe\" email = \"dengyunzhe233@outlook.com\" # 菜单配置 [menu] [[menu.main]] weight = 1 identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false ","date":"2024-08-24","objectID":"/posts/my-third-post/:2:0","tags":["笔记"],"title":"Git与Hugo学习笔记","uri":"/posts/my-third-post/"},{"categories":["文章"],"content":"3、发布及后续推送 使用本地预览代码hugo server -D,后面的参数表示加载草稿推文。编辑完成后，退出服务器，在文件夹里输入hugo,然后在public文件夹里使用git。 git的配置建议使用ssh，https和http的链接一直不太好，如果是克隆不好的话，可以手动删除git的代理，然后这里讲一下git的大致思路 当在某个文件夹打开终端后，使用命令对其进行初始化， git init git remote add origin git@github.com:username/repository.git git add . git commit -m \"hugo\" git push -u origin master 第一个命令会建立一个.git的配置文件夹，第二个会链接线上与本地的仓库，add . 会把本地所有文件移入更改的空间（记录改动），commit后面是记录更改的备注，然后就是push 在第一次信息设置完成之后，下一次更新网站可以这么做， git add -A git commit -m \"update-hugo\" git push -f origin master 下一篇文章应该会讨论一下我之前做ViT的心得。 ","date":"2024-08-24","objectID":"/posts/my-third-post/:3:0","tags":["笔记"],"title":"Git与Hugo学习笔记","uri":"/posts/my-third-post/"},{"categories":["文章"],"content":"本文主要讨论这个博客今后会写些什么东西。 来张我老婆的美图镇楼 我老婆真好康 接下来进入正题，关于本博客今后的发展，主要分两个类别的工作内容 其一是网页的文章，之后会采用git工具更新内容，然后文章的内容会主要集中在学习笔记，比如人工智能、可信导航等方面，以及个人在各种地方学到的什么东西，比如如果我实在太闲我会考虑把搭建airport和部署sd、训练唱歌ai那几篇笔记搬上来，毕竟这个还是给自己看的东西 其二是美化方面，可能以后熟悉了会换一个主题，当下主要想整明白的还是如何做一个个人主页，以及标签和分类怎么用。 然后是更新的工具， git: 用于更新 聚合图床，这里放个链接 方便我自己。 ","date":"2024-08-24","objectID":"/posts/my-second-post/:0:0","tags":["规划"],"title":"本博客今后的整体规划","uri":"/posts/my-second-post/"},{"categories":null,"content":" Title 立志做一个很酷的人 Major 电子信息、二次元 Email dengyunzhe233@outlook.com More 公众号：目前还没有 ","date":"2024-08-23","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":["灌水"],"content":"（噢耶~）我有自己的第一个博客（哈基米~）了，(荡树藤)(创飞路过吃香蕉的猴子)(怒吼)(变成猴子)(飞进原始森林)(荡树藤)(创飞路过吃香蕉的猴子)(怒吼)(变成猴子)(飞进原始森林)(荡树藤)(创飞路过吃香蕉的猴子)(怒吼)(变成猴子)(飞进原始森林) 哈！ 哈！ 哈！ 哈！ 哈！ 哈！ 劳资有自己的博客辣！！！！！ 这下不得不整一个我很喜欢的活了， 可❤爱❤视❤频❤，点❤击❤就❤有❤ 还得再来，放点我老婆的美图 还有一个有趣的音乐网页 ","date":"2024-08-23","objectID":"/posts/my-first-post/:0:0","tags":["有趣"],"title":"Hello,Hugo!","uri":"/posts/my-first-post/"}]